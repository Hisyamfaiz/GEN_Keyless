C51 COMPILER V9.60.0.0   MAIN                                                              01/27/2021 15:20:00 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\build\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) REGFILE(.\build\enhanced_shockburst_ptx_nrf24le
                    -1.ORC) BROWSE NOINTPROMOTE MODDP2 INCDIR(..\hal\nrf24le1;..\hal\nrf24l01p;..\hal;..\compiler\c51;..\compiler\common) DEF
                    -INE(MCU_NRF24LE1) DEBUG OBJECTEXTEND PRINT(.\lst\main.lst) TABS(2) OBJECT(.\build\main.obj)

line level    source

   1          /*
   2          * An nRF24LE1 REGISTER RETENTION TIMER ON example application
   3          * Master
   4          */
   5          
   6          // ======================================= Include header
   7          #include <Nordic\reg24le1.h>
   8          #include "hal_nrf.h"
   9          #include "hal_clk.h"
  10          #include "hal_rtc.h"
  11          #include "hal_delay.h"
  12          #include "hal_wdog.h"
  13          #include "hal_aes.h"
  14          #include "hal_rng.h"
  15          #include "hal_flash.h"
  16          #include <stdint.h>
  17          #include <stdbool.h>
  18          #include <string.h>
  19          
  20          // ======================================= Type definition
  21          #define TRANSISTOR            P14
  22          #define LED_1                 P02
  23          #define LED_2                 P03
  24          #define BTN_ALARM             !P04
  25          #define BTN_SEAT              !P06 
  26          
  27          #define VADDR_VCU_ID          HAL_DATA_NV_BASE_ADDRESS
  28          #define VADDR_AES_KEY         (VADDR_VCU_ID + sizeof(uint32_t))
  29          
  30          #define DATA_LENGTH           16
  31          #define ADDR_LENGTH           5
  32          #define DATA_PAIR_LENGTH      (DATA_LENGTH + ADDR_LENGTH)
  33          
  34          typedef enum {
  35            KLESS_CMD_PING  = 0,
  36            KLESS_CMD_ALARM = 1,
  37            KLESS_CMD_SEAT  = 2
  38          } KLESS_CMD;
  39          
  40          // ======================================= Global variable
  41          static uint8_t disable_radio = 0;
  42          static bool volatile radio_busy, received;
  43          static uint8_t tx_address[ADDR_LENGTH] = {0x00, 0x00, 0x00, 0x00, 0xCD};
  44          static uint8_t rx_address[ADDR_LENGTH] = {0x00, 0x00, 0x00, 0x00, 0xAB};
  45          static uint8_t xdata payload[DATA_PAIR_LENGTH];
  46          static uint8_t xdata payload_enc[DATA_LENGTH];
  47          static uint32_t idata AES_Key[4];
  48          static const uint8_t idata commands[3][8] = {
  49            { 0x5e, 0x6c, 0xa7, 0x74, 0xfd, 0xe3, 0xdf, 0xbc },
  50            { 0xf7, 0xda, 0x4a, 0x4f, 0x65, 0x2d, 0x6e, 0xf0 },
  51            { 0xff, 0xa6, 0xe6, 0x5a, 0x84, 0x82, 0x66, 0x4f }
  52          };
  53          
C51 COMPILER V9.60.0.0   MAIN                                                              01/27/2021 15:20:00 PAGE 2   

  54          // ======================================= Function prototype 
  55          void pin_init(void);
  56          void rtc_init(void);
  57          void clock_and_irq_init(void);
  58          void nrf_init(void);
  59          void sleep_mode(void);
  60          void make_random_number(uint8_t *p);
  61          void make_payload(uint8_t *payload, uint8_t cmd);
  62          void send_payload(uint8_t *payload, uint8_t pwr, uint8_t retry);
  63          void set_pairing_mode(void);
  64          void receive_pairing(void);
  65          void update_configuration(void);
  66          uint8_t pairing_ok(void);
  67          void wait_all_button_released(void);
  68          bool receive_ping(uint8_t timeout);
  69          void set_normal_mode(void);
  70          void save_flash(void);
  71          void load_flash(void);
  72          void transmit(KLESS_CMD cmd, hal_nrf_output_power_t power, uint8_t retry);
  73          void ledOn(uint8_t on);
  74          void ledToggle(void);
  75          
  76          // ======================================= Main function 
  77          void main(void){
  78   1        uint8_t show_ping = 0;
  79   1        uint32_t ms;
  80   1        
  81   1        pin_init();
  82   1        rtc_init();
  83   1        clock_and_irq_init();
  84   1        
  85   1        load_flash();
  86   1        
  87   1        nrf_init();
  88   1        hal_wdog_init(0x0300);
  89   1      
  90   1        while(1)  {           
  91   2          if (BTN_ALARM || BTN_SEAT){
  92   3            delay_ms(100);
  93   3              
  94   3            // Pairing Mode
  95   3            if (BTN_ALARM && BTN_SEAT){       
  96   4              set_pairing_mode();
  97   4              receive_pairing();
  98   4      
  99   4              // indicator result
 100   4              if (pairing_ok()){
 101   5                update_configuration();
 102   5                //LED_1 = 1;
 103   5                ledOn(0);
 104   5              } else {
 105   5                //LED_1 = 0;
 106   5                ledOn(1);
 107   5              }
 108   4              set_normal_mode();        
 109   4              wait_all_button_released();
 110   4            } 
 111   3            
 112   3            else if (BTN_ALARM) {
 113   4              ms = 0;
 114   4              while(BTN_ALARM) {
 115   5                hal_wdog_restart();
C51 COMPILER V9.60.0.0   MAIN                                                              01/27/2021 15:20:00 PAGE 3   

 116   5                delay_ms(100);
 117   5                ms+=100;
 118   5              }
 119   4      
 120   4              if (ms > 3000) show_ping = !show_ping;
 121   4              else transmit(KLESS_CMD_ALARM, HAL_NRF_0DBM, 5);
 122   4            } 
 123   3      
 124   3            else {
 125   4              ms = 0;
 126   4              while(BTN_SEAT) {
 127   5                hal_wdog_restart();
 128   5                delay_ms(100);
 129   5                ms+=100;
 130   5              }
 131   4      
 132   4              if (ms > 3000) disable_radio = !disable_radio;
 133   4            }
 134   3          }
 135   2          
 136   2          // Normal Mode
 137   2          if (receive_ping(10)){
 138   3            if (BTN_SEAT) transmit(KLESS_CMD_SEAT, HAL_NRF_6DBM, 5);
 139   3            else transmit(KLESS_CMD_PING, HAL_NRF_6DBM, 1);
 140   3      
 141   3            // indicator
 142   3            if (show_ping) {
 143   4              ledOn(1);
 144   4              delay_ms(25);
 145   4              ledOn(0);
 146   4            }
 147   3          }
 148   2      
 149   2          hal_wdog_restart(); 
 150   2          sleep_mode();
 151   2        };
 152   1      }
 153          
 154          // ======================================= Function declaration
 155          void ledToggle(void) {
 156   1        if (disable_radio) {
 157   2          LED_1 = !LED_1;
 158   2          LED_2 = 1;
 159   2        } else {
 160   2          LED_2 = !LED_2;
 161   2          LED_1 = 1;
 162   2        }
 163   1      }
 164          
 165          void ledOn(uint8_t on) {
 166   1        if (disable_radio) {
 167   2          LED_1 = !on;
 168   2          LED_2 = 1;
 169   2        } else {
 170   2          LED_2 = !on;
 171   2          LED_1 = 1;
 172   2        }
 173   1      }
 174          
 175          void transmit(KLESS_CMD command, hal_nrf_output_power_t power, uint8_t retry){
 176   1        make_payload(payload, command);
 177   1        hal_aes_crypt(payload_enc, payload);
C51 COMPILER V9.60.0.0   MAIN                                                              01/27/2021 15:20:00 PAGE 4   

 178   1      
 179   1        if (retry > 1) ledOn(1);
 180   1      
 181   1        while(retry--) {
 182   2          send_payload(payload_enc, power, 1);
 183   2          if (retry) delay_ms(5);
 184   2        }
 185   1        
 186   1        ledOn(0);
 187   1      }
 188          
 189          void wait_all_button_released(void){
 190   1          while(BTN_ALARM || BTN_SEAT){
 191   2            hal_wdog_restart();
 192   2            delay_ms(50);
 193   2          }
 194   1      }
 195          
 196          void load_flash(void){
 197   1        uint8_t vcu_id[4];
 198   1        
 199   1        hal_flash_bytes_read(VADDR_VCU_ID, vcu_id, sizeof(uint32_t));
 200   1        hal_flash_bytes_read(VADDR_AES_KEY, (uint8_t*)AES_Key, DATA_LENGTH);
 201   1        
 202   1        // Apply address
 203   1        memcpy(tx_address, vcu_id, sizeof(uint32_t));
 204   1        memcpy(rx_address, vcu_id, sizeof(uint32_t));
 205   1        // Initialise AES
 206   1        hal_aes_setup(0, ECB, (uint8_t*)AES_Key, NULL);
 207   1      }
 208          
 209          uint8_t pairing_ok(void) {
 210   1        return (received && (payload[DATA_PAIR_LENGTH - 1] == 0xAB));
 211   1      }
 212          
 213          void update_configuration(void){
 214   1        save_flash();
 215   1        load_flash();
 216   1        
 217   1        hal_nrf_set_address(HAL_NRF_TX, tx_address);
 218   1        hal_nrf_set_address(HAL_NRF_PIPE0, rx_address);
 219   1      }
 220          
 221          void save_flash(void){
 222   1        hal_flash_page_erase(HAL_DATA_NV_FLASH_PN0);
 223   1        hal_flash_bytes_write(VADDR_VCU_ID, &payload[DATA_LENGTH], sizeof(uint32_t));
 224   1        hal_flash_bytes_write(VADDR_AES_KEY, payload, DATA_LENGTH);
 225   1      }
 226          
 227          void receive_pairing(void){
 228   1        hal_nrf_set_power_mode(HAL_NRF_PWR_UP);
 229   1        hal_nrf_set_operation_mode(HAL_NRF_PRX); 
 230   1        
 231   1        // Enable receiver
 232   1        CE_HIGH();
 233   1        received = false;
 234   1        while (!received && (BTN_ALARM && BTN_SEAT)){
 235   2          // Indicator
 236   2          //LED_1 = !LED_1;
 237   2          ledToggle();
 238   2          hal_wdog_restart();
 239   2          delay_ms(100);
C51 COMPILER V9.60.0.0   MAIN                                                              01/27/2021 15:20:00 PAGE 5   

 240   2        }
 241   1        CE_LOW();
 242   1        
 243   1        hal_nrf_set_power_mode(HAL_NRF_PWR_DOWN);
 244   1        hal_nrf_set_rx_payload_width(HAL_NRF_PIPE0, DATA_LENGTH); 
 245   1      }
 246          
 247          bool receive_ping(uint8_t timeout){
 248   1        uint32_t ms = 0;
 249   1        
 250   1        hal_nrf_set_power_mode(HAL_NRF_PWR_UP);
 251   1        hal_nrf_set_operation_mode(HAL_NRF_PRX); 
 252   1        
 253   1        // Enable receiver
 254   1        CE_HIGH();
 255   1        received = false;
 256   1        while (!received && ms < timeout){
 257   2          delay_ms(1);
 258   2          ms++;
 259   2        }
 260   1        CE_LOW();
 261   1        
 262   1        hal_nrf_set_power_mode(HAL_NRF_PWR_DOWN);
 263   1        hal_nrf_set_rx_payload_width(HAL_NRF_PIPE0, DATA_LENGTH); 
 264   1        
 265   1        return received;
 266   1      }
 267          
 268          void set_pairing_mode(void) {
 269   1        // Set paring address
 270   1        memset(tx_address, 0x00, sizeof(uint32_t));
 271   1        memset(rx_address, 0x00, sizeof(uint32_t));
 272   1        
 273   1        hal_nrf_set_address(HAL_NRF_TX, tx_address);
 274   1        hal_nrf_set_address(HAL_NRF_PIPE0, rx_address);
 275   1        hal_nrf_set_rx_payload_width(HAL_NRF_PIPE0, DATA_PAIR_LENGTH);
 276   1      }
 277          
 278          void set_normal_mode(void) {
 279   1        hal_nrf_set_rx_payload_width(HAL_NRF_PIPE0, DATA_LENGTH);
 280   1      }
 281          
 282          void send_payload(uint8_t *payload, uint8_t pwr, uint8_t retry){
 283   1        hal_nrf_write_tx_payload(payload, DATA_LENGTH);
 284   1        hal_nrf_set_output_power(pwr);
 285   1        TRANSISTOR = (pwr != HAL_NRF_0DBM);
 286   1        hal_nrf_set_power_mode(HAL_NRF_PWR_UP);
 287   1        hal_nrf_set_operation_mode(HAL_NRF_PTX);
 288   1        
 289   1        while(retry--){
 290   2          CE_HIGH();
 291   2          radio_busy = true;
 292   2          while (radio_busy){}
 293   2          CE_LOW();
 294   2        }
 295   1          
 296   1        hal_nrf_set_power_mode(HAL_NRF_PWR_DOWN);
 297   1        TRANSISTOR = 1; 
 298   1      }
 299          
 300          void make_payload(uint8_t *payload, uint8_t cmd){ 
 301   1        memcpy(payload, &commands[cmd], 8);
C51 COMPILER V9.60.0.0   MAIN                                                              01/27/2021 15:20:00 PAGE 6   

 302   1      }
 303          
 304          void make_random_number(uint8_t *p){
 305   1        uint8_t len = (DATA_LENGTH/2);
 306   1        
 307   1        hal_rng_power_up(1);
 308   1        while(len--){
 309   2          while(!hal_rng_data_ready()){};
 310   2          *(p++) = hal_rng_read();
 311   2        }
 312   1        hal_rng_power_up(0);
 313   1      }
 314          
 315          void pin_init(void){
 316   1        char i;
 317   1        
 318   1        // Disconnect unused GPIOs to avoid them floating in sleep
 319   1        for (i = 0; i < 8; i++){
 320   2            P0CON = 0x70 + i;
 321   2            P1CON = 0x70 + i;
 322   2        } 
 323   1        P0DIR = 0x50;
 324   1        P1DIR = 0x00; 
 325   1      
 326   1        P0CON = 0x00 + 3; // Set P0.3 as output again
 327   1        P0CON = 0x00 + 2; // Set P0.2 as output again
 328   1        P0CON = 0x50 + 6; // Set P0.6 as input again
 329   1        P0CON = 0x50 + 4; // Set P0.4 as input again
 330   1        P1CON = 0x00 + 4; // Set P1.4 as output again
 331   1          
 332   1        P0 = 0xff;
 333   1        P1 = 0x00;
 334   1        
 335   1        WUOPC0 = 0x00;  //set pin P0.4 & P0.6 as wake-up pin
 336   1      //  OPMCON = 0x00;  //latch open and wake-up pin active high
 337   1        
 338   1        // Set default 
 339   1        TRANSISTOR = 1;
 340   1        LED_1 = 1;
 341   1        LED_2 = 1;
 342   1      }
 343          
 344          void nrf_init(void){
 345   1        hal_nrf_set_datarate(HAL_NRF_250KBPS);
 346   1        hal_nrf_set_crc_mode(HAL_NRF_CRC_8BIT);
 347   1        hal_nrf_set_address_width(HAL_NRF_AW_5BYTES);
 348   1        hal_nrf_set_auto_retr(0,0);
 349   1        hal_nrf_set_rf_channel(110);
 350   1        hal_nrf_set_address(HAL_NRF_TX, tx_address);
 351   1        hal_nrf_set_rx_payload_width(HAL_NRF_PIPE0, DATA_LENGTH);
 352   1        hal_nrf_open_pipe(HAL_NRF_PIPE0, 1);
 353   1        hal_nrf_set_address(HAL_NRF_PIPE0, rx_address);
 354   1        //setting interupt mode
 355   1        hal_nrf_set_irq_mode(HAL_NRF_MAX_RT,1);
 356   1        hal_nrf_set_irq_mode(HAL_NRF_TX_DS,1);
 357   1        hal_nrf_set_irq_mode(HAL_NRF_RX_DR,1);
 358   1        hal_nrf_enable_ack_payload(1);
 359   1        //clear interupt flag
 360   1        hal_nrf_clear_irq_flag(HAL_NRF_MAX_RT);
 361   1        hal_nrf_clear_irq_flag(HAL_NRF_TX_DS);
 362   1        hal_nrf_clear_irq_flag(HAL_NRF_RX_DR);
 363   1      }
C51 COMPILER V9.60.0.0   MAIN                                                              01/27/2021 15:20:00 PAGE 7   

 364          
 365          void rtc_init(void){
 366   1        hal_rtc_start(false);
 367   1        hal_clklf_set_source(HAL_CLKLF_RCOSC32K);
 368   1        hal_rtc_set_compare_mode(HAL_RTC_COMPARE_MODE_0);
 369   1        hal_rtc_set_compare_value(0xFFFF/2);
 370   1        hal_rtc_start(true);
 371   1      
 372   1        // Wait for the 32kHz to startup (change phase)
 373   1        while((CLKLFCTRL&0x80)==0x80);
 374   1        while((CLKLFCTRL&0x80)!=0x80);
 375   1        
 376   1        // Setting wake-up from TICK and IRQ
 377   1        IEN1 = 0x20|0x08; 
 378   1      }
 379          
 380          void clock_and_irq_init(void){
 381   1        // Wait until 16 MHz crystal oscillator is running
 382   1        #ifdef MCU_NRF24LE1
 383   1        while(hal_clk_get_16m_source() != HAL_CLK_XOSC16M){}
 384   1        #endif
 385   1        // Enable the radio clock
 386   1        RFCKEN = 1U;
 387   1        // Enable RF irq
 388   1        RF = 1U;
 389   1        // Enable global irq
 390   1        EA = 1U;
 391   1      }
 392          
 393          void sleep_mode(void){
 394   1        // Register retention mode
 395   1        PWRDWN = 0x04;
 396   1        // Standby mode (wait for irq)
 397   1        PWRDWN = 0x07;
 398   1        // Clear PWRDWN
 399   1        PWRDWN = 0x00;
 400   1        // Exit sleep mode
 401   1      }
 402          
 403          // ======================================= Interrupt Service Routine
 404          // RTC wakeup by tick
 405          void wakeup_tick() interrupt INTERRUPT_TICK {
 406   1         //LED_2 = !LED_2; 
 407   1      }
 408          
 409          // RTC wakeup by button
 410          void wakeup_irq() interrupt INTERRUPT_WUOPIRQ {
 411   1        // LED_1 = !LED_1;
 412   1      }
 413          
 414          
 415          // Radio irq
 416          NRF_ISR() {
 417   1        uint8_t irq_flags;
 418   1      
 419   1        // Read and clear IRQ flags from radio
 420   1        irq_flags = hal_nrf_get_clear_irq_flags();
 421   1       
 422   1        switch(irq_flags)
 423   1        {
 424   2          // Transmission success
 425   2          case (1 << (uint8_t)HAL_NRF_TX_DS):
C51 COMPILER V9.60.0.0   MAIN                                                              01/27/2021 15:20:00 PAGE 8   

 426   2            radio_busy = false;
 427   2            // Data has been sent
 428   2            break;
 429   2          
 430   2          // Transmission failed (maximum re-transmits)
 431   2          case (1 << (uint8_t)HAL_NRF_MAX_RT):
 432   2            // When a MAX_RT interrupt occurs the TX payload will not be removed from the TX FIFO.
 433   2            // If the packet is to be discarded this must be done manually by flushing the TX FIFO.
 434   2            // Alternatively, CE_PULSE() can be called re-starting transmission of the payload.
 435   2            // (Will only be possible after the radio irq flags are cleared)
 436   2            hal_nrf_flush_tx();
 437   2            radio_busy = false;
 438   2            break;
 439   2          
 440   2          // Received success
 441   2          case (1 << (uint8_t)HAL_NRF_RX_DR):
 442   2            // Read payload
 443   2            while(!hal_nrf_rx_fifo_empty()){
 444   3              hal_nrf_read_rx_payload(payload);
 445   3            }
 446   2            received = true;
 447   2            break;
 448   2            
 449   2          default:
 450   2            break;
 451   2        }
 452   1        
 453   1      }
 454          /** @} */
 455          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1354    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     37    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     13      27
   IDATA SIZE       =     40    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
