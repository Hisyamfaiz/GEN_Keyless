C51 COMPILER V9.60.0.0   MAIN                                                              01/13/2021 15:30:32 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\build\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) REGFILE(.\build\enhanced_shockburst_ptx_nrf24le
                    -1.ORC) BROWSE NOINTPROMOTE MODDP2 INCDIR(..\hal\nrf24le1;..\hal\nrf24l01p;..\hal;..\compiler\c51;..\compiler\common) DEF
                    -INE(MCU_NRF24LE1) DEBUG OBJECTEXTEND PRINT(.\lst\main.lst) TABS(2) OBJECT(.\build\main.obj)

line level    source

   1          /*
   2          * An nRF24LE1 REGISTER RETENTION TIMER ON example application
   3          * Master
   4          */
   5          
   6          // ======================================= Include header
   7          #include <Nordic\reg24le1.h>
   8          #include "hal_nrf.h"
   9          #include "hal_clk.h"
  10          #include "hal_rtc.h"
  11          #include "hal_delay.h"
  12          #include "hal_wdog.h"
  13          #include "hal_aes.h"
  14          #include "hal_rng.h"
  15          #include "hal_flash.h"
  16          #include <stdint.h>
  17          #include <stdbool.h>
  18          #include <string.h>
  19          
  20          // ======================================= Type definition
  21          #define TRANSISTOR            P10
  22          #define LED_1                 P11
  23          #define LED_2                 P13
  24          #define BTN_ALARM             P03
  25          #define BTN_SEAT              P01
  26          
  27          #define VADDR_VCU_ID          HAL_DATA_NV_BASE_ADDRESS
  28          #define VADDR_AES_KEY         (VADDR_VCU_ID + sizeof(uint32_t))
  29          
  30          #define DATA_LENGTH           16
  31          #define ADDR_LENGTH           5
  32          #define DATA_PAIR_LENGTH     (DATA_LENGTH + ADDR_LENGTH)
  33          
  34          typedef enum {
  35            KLESS_CMD_PING  = 0,
  36            KLESS_CMD_ALARM = 1,
  37            KLESS_CMD_SEAT  = 2
  38          } KLESS_CMD;
  39          
  40          // ======================================= Global variable
  41          static bool volatile radio_busy, received;
  42          static uint8_t tx_address[ADDR_LENGTH] = {0x00, 0x00, 0x00, 0x00, 0xCD};
  43          static uint8_t rx_address[ADDR_LENGTH] = {0x00, 0x00, 0x00, 0x00, 0xAB};
  44          static uint8_t xdata payload[DATA_PAIR_LENGTH];
  45          static uint8_t xdata payload_enc[DATA_LENGTH];
  46          static uint32_t idata AES_Key[4];
  47          static const uint8_t idata commands[3][8] = {
  48            { 0x5e, 0x6c, 0xa7, 0x74, 0xfd, 0xe3, 0xdf, 0xbc },
  49            { 0xf7, 0xda, 0x4a, 0x4f, 0x65, 0x2d, 0x6e, 0xf0 },
  50            { 0xff, 0xa6, 0xe6, 0x5a, 0x84, 0x82, 0x66, 0x4f }
  51          };
  52          
  53          // ======================================= Function prototype 
C51 COMPILER V9.60.0.0   MAIN                                                              01/13/2021 15:30:32 PAGE 2   

  54          void pin_init(void);
  55          void rtc_init(void);
  56          void clock_and_irq_init(void);
  57          void nrf_init(void);
  58          void sleep_mode(void);
  59          void make_random_number(uint8_t *p);
  60          void make_command(KLESS_CMD *cmd, hal_nrf_output_power_t *pwr);
  61          void make_payload(uint8_t *payload, uint8_t cmd);
  62          void send_payload(uint8_t *payload, uint8_t pwr, uint8_t retry);
  63          void set_pairing_mode(void);
  64          void receive_pairing(void);
  65          void update_configuration(uint8_t *success);
  66          void wait_button_released(void);
  67          bool receive_ping(uint8_t timeout);
  68          void set_normal_mode(void);
  69          void save_flash(void);
  70          void load_flash(void);
  71          void transmit (void);
  72          
  73          // ======================================= Main function 
  74          void main(void){
  75   1        // local variable
  76   1        uint8_t pairing_success;  
  77   1        // Initialise GPIO
  78   1        pin_init();
  79   1        // Initialise RTC
  80   1        rtc_init();
  81   1        // Initialise clock & irq
  82   1        clock_and_irq_init();
  83   1        
  84   1        // Load Flash
  85   1        load_flash();
  86   1        
  87   1        // Initialise RF module
  88   1        nrf_init();
  89   1        // Initialise watchdog
  90   1        hal_wdog_init(0x0300);
  91   1      
  92   1        while(1)  {           
  93   2          if(BTN_ALARM || BTN_SEAT){
  94   3            // handle bounce effect
  95   3            delay_ms(100);
  96   3              
  97   3            if(BTN_ALARM && BTN_SEAT){
  98   4              // Pairing Mode
  99   4              pairing_success = 0;
 100   4              
 101   4              // Set to pairing configuration
 102   4              set_pairing_mode();
 103   4              // Receive mode
 104   4              receive_pairing();
 105   4              // Check Payload
 106   4              update_configuration(&pairing_success);
 107   4              // indicator result
 108   4              if(pairing_success){
 109   5                LED_1 = 0;
 110   5                LED_2 = 0;
 111   5              } else {
 112   5                LED_1 = 1;
 113   5                LED_2 = 1;
 114   5              }
 115   4              
C51 COMPILER V9.60.0.0   MAIN                                                              01/13/2021 15:30:32 PAGE 3   

 116   4              set_normal_mode();
 117   4              
 118   4            // Wait until button released
 119   4            wait_button_released();
 120   4              
 121   4            } else if(BTN_ALARM){
 122   4              transmit();
 123   4              // indicator
 124   4              LED_2 = !LED_2;
 125   4            }
 126   3          } 
 127   2          
 128   2            // Normal Mode
 129   2            if (receive_ping(20) && !BTN_ALARM){
 130   3              transmit();
 131   3              // indicator
 132   3              LED_1 = !LED_1;
 133   3            }
 134   2      
 135   2          // reset wdog
 136   2          hal_wdog_restart(); 
 137   2          
 138   2          // Enter sleep mode
 139   2          sleep_mode();
 140   2        };
 141   1      }
 142          
 143          // ======================================= Function declaration
 144          void transmit (void){
 145   1        KLESS_CMD command;
 146   1        hal_nrf_output_power_t power;
 147   1        
 148   1        // Generate Command       
 149   1        make_command(&command, &power);
 150   1        // Insert command to payload
 151   1        make_payload(payload, command);
 152   1        // Encrypt payload
 153   1        hal_aes_crypt(payload_enc, payload);
 154   1        // Send the payload
 155   1        send_payload(payload_enc, power, 1);
 156   1      }
 157          
 158          void wait_button_released(void){
 159   1          while(BTN_ALARM || BTN_SEAT){
 160   2            hal_wdog_restart();
 161   2            delay_ms(50);
 162   2          }
 163   1          //delay_ms(100);  
 164   1      }
 165          
 166          void load_flash(void){
 167   1        uint8_t vcu_id[4];
 168   1        
 169   1        hal_flash_bytes_read(VADDR_VCU_ID, vcu_id, sizeof(uint32_t));
 170   1        hal_flash_bytes_read(VADDR_AES_KEY, (uint8_t*)AES_Key, DATA_LENGTH);
 171   1        
 172   1        // Apply address
 173   1        memcpy(tx_address, vcu_id, sizeof(uint32_t));
 174   1        memcpy(rx_address, vcu_id, sizeof(uint32_t));
 175   1        // Initialise AES
 176   1        hal_aes_setup(0, ECB, (uint8_t*)AES_Key, NULL);
 177   1      }
C51 COMPILER V9.60.0.0   MAIN                                                              01/13/2021 15:30:32 PAGE 4   

 178          
 179          void update_configuration(uint8_t *success){
 180   1        if(received && (payload[DATA_PAIR_LENGTH - 1] == 0xAB)) {
 181   2          //safe to flash
 182   2          save_flash();
 183   2          
 184   2          // Apply new aes key
 185   2          load_flash();
 186   2          
 187   2          //setting Tx address
 188   2          hal_nrf_set_address(HAL_NRF_TX, tx_address);
 189   2          //setting Rx address for pipe0
 190   2          hal_nrf_set_address(HAL_NRF_PIPE0, rx_address);
 191   2          
 192   2          *success = 1;
 193   2        } 
 194   1      }
 195          
 196          void save_flash(void){
 197   1        // Save to flash
 198   1        hal_flash_page_erase(HAL_DATA_NV_FLASH_PN0);
 199   1        hal_flash_bytes_write(VADDR_VCU_ID, &payload[DATA_LENGTH], sizeof(uint32_t));
 200   1        hal_flash_bytes_write(VADDR_AES_KEY, payload, DATA_LENGTH);
 201   1      }
 202          
 203          void receive_pairing(void){
 204   1        // Power up radio
 205   1        hal_nrf_set_power_mode(HAL_NRF_PWR_UP);
 206   1        // Configure radio as primary receiver 
 207   1        hal_nrf_set_operation_mode(HAL_NRF_PRX); 
 208   1        
 209   1        // Enable receiver
 210   1        CE_HIGH();
 211   1        received = false;
 212   1        while (!received && (BTN_ALARM && BTN_SEAT)){
 213   2          // Indicator
 214   2          LED_1 = !LED_1;
 215   2          LED_2 = !LED_1;
 216   2      
 217   2          hal_wdog_restart();
 218   2          delay_ms(100);
 219   2        }
 220   1        CE_LOW();
 221   1        
 222   1        // Power off radio  
 223   1        hal_nrf_set_power_mode(HAL_NRF_PWR_DOWN);
 224   1        //setting payload width back
 225   1        hal_nrf_set_rx_payload_width(HAL_NRF_PIPE0, DATA_LENGTH); 
 226   1      }
 227          
 228          bool receive_ping(uint8_t timeout){
 229   1        uint32_t ms = 0;
 230   1        // Power up radio
 231   1        hal_nrf_set_power_mode(HAL_NRF_PWR_UP);
 232   1        // Configure radio as primary receiver 
 233   1        hal_nrf_set_operation_mode(HAL_NRF_PRX); 
 234   1        
 235   1        // Enable receiver
 236   1        CE_HIGH();
 237   1        received = false;
 238   1        while (!received && ms < timeout){
 239   2          // Indicator
C51 COMPILER V9.60.0.0   MAIN                                                              01/13/2021 15:30:32 PAGE 5   

 240   2      //    LED_1 = !LED_1;
 241   2      //    LED_2 = !LED_1;
 242   2      
 243   2          delay_ms(1);
 244   2          ms++;
 245   2        }
 246   1        CE_LOW();
 247   1        
 248   1        // Power off radio  
 249   1        hal_nrf_set_power_mode(HAL_NRF_PWR_DOWN);
 250   1        //setting payload width back
 251   1        hal_nrf_set_rx_payload_width(HAL_NRF_PIPE0, DATA_LENGTH); 
 252   1        
 253   1        return received;
 254   1      }
 255          
 256          void set_pairing_mode(void) {
 257   1        // Set paring address
 258   1        memset(tx_address, 0x00, sizeof(uint32_t));
 259   1        memset(rx_address, 0x00, sizeof(uint32_t));
 260   1        
 261   1        //setting Tx address
 262   1        hal_nrf_set_address(HAL_NRF_TX, tx_address);
 263   1        //setting Rx address for pipe0
 264   1        hal_nrf_set_address(HAL_NRF_PIPE0, rx_address);
 265   1        //setting payload width
 266   1        hal_nrf_set_rx_payload_width(HAL_NRF_PIPE0, DATA_PAIR_LENGTH);
 267   1      }
 268          
 269          void set_normal_mode(void) {
 270   1        //setting payload width
 271   1        hal_nrf_set_rx_payload_width(HAL_NRF_PIPE0, DATA_LENGTH);
 272   1      }
 273          
 274          void send_payload(uint8_t *payload, uint8_t pwr, uint8_t retry){
 275   1        // Write payload to radio TX FIFO
 276   1        hal_nrf_write_tx_payload(payload, DATA_LENGTH);
 277   1        // Setting power output
 278   1        hal_nrf_set_output_power(pwr);
 279   1        // Set transistor based on Command
 280   1        TRANSISTOR = (pwr != HAL_NRF_0DBM);
 281   1        // Power up radio
 282   1        hal_nrf_set_power_mode(HAL_NRF_PWR_UP);
 283   1        // Configure radio as primary receiver (PTX)
 284   1        hal_nrf_set_operation_mode(HAL_NRF_PTX);
 285   1        
 286   1        while(retry--){// Start transmission
 287   2          CE_HIGH();
 288   2          radio_busy = true;
 289   2          while (radio_busy){}
 290   2          CE_LOW();
 291   2        }
 292   1          
 293   1        // Power off radio  
 294   1        hal_nrf_set_power_mode(HAL_NRF_PWR_DOWN);
 295   1        // Set transistor to Open
 296   1        TRANSISTOR = 1; 
 297   1      }
 298          
 299          void make_payload(uint8_t *payload, uint8_t cmd){ 
 300   1        memcpy(payload, &commands[cmd], 8);
 301   1        //memcpy(payload+8, &commands[cmd], 8);
C51 COMPILER V9.60.0.0   MAIN                                                              01/13/2021 15:30:32 PAGE 6   

 302   1      }
 303          
 304          void make_command(KLESS_CMD *cmd, hal_nrf_output_power_t *pwr){   
 305   1        // handle each buttons
 306   1        *pwr = HAL_NRF_18DBM;
 307   1        if(BTN_SEAT)  {
 308   2          *cmd = KLESS_CMD_SEAT;
 309   2        } 
 310   1        else if (BTN_ALARM){
 311   2          // Button Command Mode        
 312   2          *cmd = KLESS_CMD_ALARM;
 313   2          *pwr = HAL_NRF_0DBM;
 314   2        }
 315   1        else {
 316   2          *cmd = KLESS_CMD_PING;
 317   2        }   
 318   1      }
 319          
 320          void make_random_number(uint8_t *p){
 321   1        uint8_t len = (DATA_LENGTH/2);
 322   1        
 323   1        // start
 324   1        hal_rng_power_up(1);
 325   1        while(len--){
 326   2          while(!hal_rng_data_ready()){};
 327   2          *(p++) = hal_rng_read();
 328   2        }
 329   1        hal_rng_power_up(0);
 330   1      }
 331          
 332          void pin_init(void){
 333   1        char i;
 334   1        
 335   1        // Disconnect unused GPIOs to avoid them floating in sleep
 336   1        for (i = 0; i < 8; i++){
 337   2            P0CON = 0x70 + i;
 338   2            P1CON = 0x70 + i;
 339   2        } 
 340   1        P0DIR = 0x0B; 
 341   1        P1DIR = 0x00;
 342   1      
 343   1        P1CON = 0x00 + 3; // Set P1.3 as outputb  again
 344   1        P1CON = 0x00 + 0; // Set P1.1 as output again
 345   1        P0CON = 0x10 + 1; // Set P0.1 as input again
 346   1        P0CON = 0x10 + 3; // Set P0.3 as input again
 347   1          
 348   1        P0 = 0x00;
 349   1        P1 = 0x00;
 350   1        
 351   1        WUOPC0 = 0x0B;  //set pin P0.3 & P0.1 as wake-up pin
 352   1        OPMCON = 0x00;  //latch open and wake-up pin active high
 353   1        
 354   1        // Set default 
 355   1        TRANSISTOR = 1;
 356   1        LED_1 = 0;
 357   1        LED_2 = 0;
 358   1      }
 359          
 360          void nrf_init(void){
 361   1        // Setting datarate
 362   1        hal_nrf_set_datarate(HAL_NRF_1MBPS);
 363   1        //setting crc
C51 COMPILER V9.60.0.0   MAIN                                                              01/13/2021 15:30:32 PAGE 7   

 364   1        hal_nrf_set_crc_mode(HAL_NRF_CRC_8BIT);
 365   1        //setting address
 366   1        hal_nrf_set_address_width(HAL_NRF_AW_5BYTES);
 367   1        //setting auto retransmitt
 368   1        hal_nrf_set_auto_retr(0x0F,0x0F);
 369   1        //settinf RF channel
 370   1        hal_nrf_set_rf_channel(110);
 371   1        //setting Tx address
 372   1        hal_nrf_set_address(HAL_NRF_TX, tx_address);
 373   1        //setting payload width
 374   1        hal_nrf_set_rx_payload_width(HAL_NRF_PIPE0, DATA_LENGTH);
 375   1        //open pipe
 376   1        hal_nrf_open_pipe(HAL_NRF_PIPE0, 1);
 377   1        //setting Rx address for pipe0
 378   1        hal_nrf_set_address(HAL_NRF_PIPE0, rx_address);
 379   1        //setting interupt mode
 380   1        hal_nrf_set_irq_mode(HAL_NRF_MAX_RT,1);
 381   1        hal_nrf_set_irq_mode(HAL_NRF_TX_DS,1);
 382   1        hal_nrf_set_irq_mode(HAL_NRF_RX_DR,1);
 383   1        //disable ack
 384   1        hal_nrf_enable_ack_payload(1);
 385   1        //clear interupt flag
 386   1        hal_nrf_clear_irq_flag(HAL_NRF_MAX_RT);
 387   1        hal_nrf_clear_irq_flag(HAL_NRF_TX_DS);
 388   1        hal_nrf_clear_irq_flag(HAL_NRF_RX_DR);
 389   1      }
 390          
 391          void rtc_init(void){
 392   1        hal_rtc_start(false);
 393   1        hal_clklf_set_source(HAL_CLKLF_RCOSC32K);
 394   1        hal_rtc_set_compare_mode(HAL_RTC_COMPARE_MODE_0);
 395   1        hal_rtc_set_compare_value(0xFFFF/2);
 396   1        hal_rtc_start(true);
 397   1      
 398   1        // Wait for the 32kHz to startup (change phase)
 399   1        while((CLKLFCTRL&0x80)==0x80);
 400   1        while((CLKLFCTRL&0x80)!=0x80);
 401   1        
 402   1        // Setting wake-up from TICK and IRQ
 403   1        IEN1 = 0x20|0x08; 
 404   1      }
 405          
 406          void clock_and_irq_init(void){
 407   1        // Wait until 16 MHz crystal oscillator is running
 408   1        #ifdef MCU_NRF24LE1
 409   1        while(hal_clk_get_16m_source() != HAL_CLK_XOSC16M){}
 410   1        #endif
 411   1        // Enable the radio clock
 412   1        RFCKEN = 1U;
 413   1        // Enable RF irq
 414   1        RF = 1U;
 415   1        // Enable global irq
 416   1        EA = 1U;
 417   1      }
 418          
 419          void sleep_mode(void){
 420   1        // Register retention mode
 421   1        PWRDWN = 0x04;
 422   1        // Standby mode (wait for irq)
 423   1        PWRDWN = 0x07;
 424   1        // Clear PWRDWN
 425   1        PWRDWN = 0x00;
C51 COMPILER V9.60.0.0   MAIN                                                              01/13/2021 15:30:32 PAGE 8   

 426   1        // Exit sleep mode
 427   1      }
 428          
 429          // ======================================= Interrupt Service Routine
 430          // RTC wakeup by tick
 431          void wakeup_tick() interrupt INTERRUPT_TICK {
 432   1         //LED_2 = !LED_2; 
 433   1      }
 434          
 435          // RTC wakeup by button
 436          void wakeup_irq() interrupt INTERRUPT_WUOPIRQ {
 437   1        // LED_1 = !LED_1;
 438   1      }
 439          
 440          
 441          // Radio irq
 442          NRF_ISR() {
 443   1        uint8_t irq_flags;
 444   1      
 445   1        // Read and clear IRQ flags from radio
 446   1        irq_flags = hal_nrf_get_clear_irq_flags();
 447   1       
 448   1        switch(irq_flags)
 449   1        {
 450   2          // Transmission success
 451   2          case (1 << (uint8_t)HAL_NRF_TX_DS):
 452   2            radio_busy = false;
 453   2            // Data has been sent
 454   2            break;
 455   2          
 456   2          // Transmission failed (maximum re-transmits)
 457   2          case (1 << (uint8_t)HAL_NRF_MAX_RT):
 458   2            // When a MAX_RT interrupt occurs the TX payload will not be removed from the TX FIFO.
 459   2            // If the packet is to be discarded this must be done manually by flushing the TX FIFO.
 460   2            // Alternatively, CE_PULSE() can be called re-starting transmission of the payload.
 461   2            // (Will only be possible after the radio irq flags are cleared)
 462   2            hal_nrf_flush_tx();
 463   2            radio_busy = false;
 464   2            break;
 465   2          
 466   2          // Received success
 467   2          case (1 << (uint8_t)HAL_NRF_RX_DR):
 468   2            // Read payload
 469   2            while(!hal_nrf_rx_fifo_empty()){
 470   3              hal_nrf_read_rx_payload(payload);
 471   3            }
 472   2            received = true;
 473   2            break;
 474   2            
 475   2          default:
 476   2            break;
 477   2        }
 478   1        
 479   1      }
 480          /** @} */
 481          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1167    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     37    ----
C51 COMPILER V9.60.0.0   MAIN                                                              01/13/2021 15:30:32 PAGE 9   

   PDATA SIZE       =   ----    ----
   DATA SIZE        =     12      32
   IDATA SIZE       =     40    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
